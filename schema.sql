-- Schema for BAP Management System
--
-- This SQL script creates a MySQL database along with the tables
-- necessary to store BAP (Berita Acara Pemeriksaan) requests,
-- associated schedules, and administrator credentials. The schema
-- corresponds to the functionality implemented in the provided
-- HTML/JavaScript front‑end and Python backend. Each request
-- captures identifying information about the applicant, the reason
-- for the request, a reference to an uploaded identity document,
-- the current status of the request, administrative notes, and
-- timestamps. Optionally, a schedule can be assigned to a
-- request by filling in the date, start/end times, location and
-- officer fields. Administrators are stored in their own table
-- with hashed passwords to facilitate secure authentication.

-- Create the database (if it does not already exist) using
-- UTF8MB4 character set to support a wide range of characters.
CREATE DATABASE IF NOT EXISTS bap_system
  DEFAULT CHARACTER SET utf8mb4
  DEFAULT COLLATE utf8mb4_general_ci;

-- Switch to the new database context.
USE bap_system;

-- Table: admins
-- Stores administrator credentials.  Passwords should be stored as
-- hashes rather than plain text.  The default login in the sample
-- application is 'admin' with password '12345'; however, in a
-- production environment you should replace this with a strong
-- password hash (e.g. produced by bcrypt).
CREATE TABLE IF NOT EXISTS admins (
  id INT UNSIGNED NOT NULL AUTO_INCREMENT,
  username VARCHAR(50) NOT NULL UNIQUE,
  password_hash VARCHAR(255) NOT NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (id)
) ENGINE=InnoDB;

-- Table: requests
-- Stores incoming BAP requests submitted by users.  Each record
-- contains the applicant's identifying information and the status
-- of the request.  A UUID is used for the primary key to mirror
-- the front‑end’s use of crypto.randomUUID().  A separate
-- numeric auto_increment column could be added if desired.  The
-- nomor_permohonan column is generated by the server and must be
-- unique across all requests.  The status is constrained to
-- accepted values via an ENUM.
CREATE TABLE IF NOT EXISTS requests (
  id CHAR(36) NOT NULL,
  nomor_permohonan VARCHAR(25) NOT NULL UNIQUE,
  nama VARCHAR(100) NOT NULL,
  tanggal_lahir DATE NOT NULL,
  nomor_hp VARCHAR(15) NOT NULL,
  email VARCHAR(100) DEFAULT NULL,
  paspor VARCHAR(20) NOT NULL,
  tujuan TEXT NOT NULL,
  lampiran VARCHAR(255) DEFAULT NULL,
  status ENUM('pending','approved','rejected','rescheduled') NOT NULL DEFAULT 'pending',
  catatan_admin TEXT DEFAULT NULL,
  schedule_tanggal DATE DEFAULT NULL,
  schedule_jam_mulai TIME DEFAULT NULL,
  schedule_jam_selesai TIME DEFAULT NULL,
  schedule_lokasi VARCHAR(255) DEFAULT NULL,
  schedule_petugas VARCHAR(100) DEFAULT NULL,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  PRIMARY KEY (id)
) ENGINE=InnoDB;

-- Index to speed up lookups by passport number and phone number.
CREATE INDEX idx_requests_paspor ON requests(paspor);
CREATE INDEX idx_requests_nomor_hp ON requests(nomor_hp);

-- Optional: insert a default admin account.  Replace the
-- password hash with a securely generated hash in real use.
-- For demonstration purposes only, this creates the same
-- username/password as in the original code ('admin' / '12345').
INSERT INTO admins (username, password_hash)
VALUES
  ('admin', '$2y$12$exampleplaceholderhashfor12345');